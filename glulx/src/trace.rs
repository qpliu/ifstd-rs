use glk::Glk;
use super::execute::Execute;
use super::opcode;

pub fn trace<G: Glk>(exec: &Execute<G>, addr: usize, opcode: u32) {
    print!("{:06x}:{:03x} {:10.10} ", addr, opcode, opcode_name(opcode));
    print!("Fr:{:x}:{:x}:{:x} [", exec.state.frame_ptr, exec.frame_locals, exec.frame_end);
    for i in exec.frame_locals .. exec.frame_end {
        print!(" {:x}", exec.state.stack[i]);
    }
    print!("] St:[");
    for i in exec.frame_end .. exec.state.stack.len() {
        print!(" {:x}", exec.state.stack[i]);
    }
    println!("]");
}

fn opcode_name(opcode: u32) -> &'static str {
    match opcode {
        opcode::NOP => "nop",
        opcode::ADD => "add",
        opcode::SUB => "sub",
        opcode::MUL => "mul",
        opcode::DIV => "div",
        opcode::MOD => "mod",
        opcode::NEG => "neg",
        opcode::BITAND => "bitand",
        opcode::BITOR => "bitor",
        opcode::BITXOR => "bitxor",
        opcode::BITNOT => "bitnot",
        opcode::SHIFTL => "shiftl",
        opcode::SSHIFTR => "sshiftr",
        opcode::USHIFTR => "ushiftr",
        opcode::JUMP => "jump",
        opcode::JZ => "jz",
        opcode::JNZ => "jnz",
        opcode::JEQ => "jeq",
        opcode::JNE => "jne",
        opcode::JLT => "jlt",
        opcode::JGE => "jge",
        opcode::JGT => "jgt",
        opcode::JLE => "jle",
        opcode::JLTU => "jltu",
        opcode::JGEU => "jgeu",
        opcode::JGTU => "jgtu",
        opcode::JLEU => "jleu",
        opcode::CALL => "call",
        opcode::RETURN => "return",
        opcode::CATCH => "catch",
        opcode::THROW => "throw",
        opcode::TAILCALL => "tailcall",
        opcode::COPY => "copy",
        opcode::COPYS => "copys",
        opcode::COPYB => "copyb",
        opcode::SEXS => "sexs",
        opcode::SEXB => "sexb",
        opcode::ALOAD => "aload",
        opcode::ALOADS => "aloads",
        opcode::ALOADB => "aloadb",
        opcode::ALOADBIT => "aloadbit",
        opcode::ASTORE => "astore",
        opcode::ASTORES => "astores",
        opcode::ASTOREB => "astoreb",
        opcode::ASTOREBIT => "astorebit",
        opcode::STKCOUNT => "stkcount",
        opcode::STKPEEK => "stkpeek",
        opcode::STKSWAP => "stkswap",
        opcode::STKROLL => "stkroll",
        opcode::STKCOPY => "stkcopy",
        opcode::STREAMCHAR => "streamchar",
        opcode::STREAMNUM => "streamnum",
        opcode::STREAMSTR => "streamstr",
        opcode::STREAMUNICHAR => "streamunichar",
        opcode::GESTALT => "gestalt",
        opcode::DEBUGTRAP => "debugtrap",
        opcode::GETMEMSIZE => "getmemsize",
        opcode::SETMEMSIZE => "setmemsize",
        opcode::JUMPABS => "jumpabs",
        opcode::RANDOM => "random",
        opcode::SETRANDOM => "setrandom",
        opcode::QUIT => "quit",
        opcode::VERIFY => "verify",
        opcode::RESTART => "restart",
        opcode::SAVE => "save",
        opcode::RESTORE => "restore",
        opcode::SAVEUNDO => "saveundo",
        opcode::RESTOREUNDO => "restoreundo",
        opcode::PROTECT => "protect",
        opcode::GLK => "glk",
        opcode::GETSTRINGTBL => "getstringtbl",
        opcode::SETSTRINGTBL => "setstringtbl",
        opcode::GETIOSYS => "getiosys",
        opcode::SETIOSYS => "setiosys",
        opcode::LINEARSEARCH => "linearsearch",
        opcode::BINARYSEARCH => "binarysearch",
        opcode::LINKEDSEARCH => "linkedsearch",
        opcode::CALLF => "callf",
        opcode::CALLFI => "callfi",
        opcode::CALLFII => "callfii",
        opcode::CALLFIII => "callfiii",
        opcode::MZERO => "mzero",
        opcode::MCOPY => "mcopy",
        opcode::MALLOC => "malloc",
        opcode::MFREE => "mfree",
        opcode::ACCELFUNC => "accelfunc",
        opcode::ACCELPARAM => "accelparam",
        opcode::NUMTOF => "numtof",
        opcode::FTONUMZ => "ftonumz",
        opcode::FTONUMN => "ftonumn",
        opcode::CEIL => "ceil",
        opcode::FLOOR => "floor",
        opcode::FADD => "fadd",
        opcode::FSUB => "fsub",
        opcode::FMUL => "fmul",
        opcode::FDIV => "fdiv",
        opcode::FMOD => "fmod",
        opcode::SQRT => "sqrt",
        opcode::EXP => "exp",
        opcode::LOG => "log",
        opcode::POW => "pow",
        opcode::SIN => "sin",
        opcode::COS => "cos",
        opcode::TAN => "tan",
        opcode::ASIN => "asin",
        opcode::ACOS => "acos",
        opcode::ATAN => "atan",
        opcode::ATAN2 => "atan2",
        opcode::JFEQ => "jfeq",
        opcode::JFNE => "jfne",
        opcode::JFLT => "jflt",
        opcode::JFLE => "jfle",
        opcode::JFGT => "jfgt",
        opcode::JFGE => "jfge",
        opcode::JISNAN => "jisnan",
        opcode::JISINF => "jisinf",
        _ => "<unknown>",
    }
}
